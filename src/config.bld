/*
 * Copyright (c) 2011-2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  ======== config.bld ========
 *  Build configuration script
 */

/*
 * Common options for C6x
 *
 * -pdr     : show remarks
 * -pden    : show id's assocated with err/warn/remarks
 * -pds=238 : suppress "controlling expression is constant" remark (often
 *            seen in Assert usage
 * -pds=880 : suppress "unreferenced variable" remark
 */
var c6xOpts = " -mi10 -mo -pdr -pden -pds=238 -pds=880 -g ";

var ccOpts = {
    "ti.targets.elf.C64T"             : c6xOpts,
    "ti.targets.elf.C674"             : c6xOpts,
    "ti.targets.elf.C66"              : " -mv6600 -pds=238 -pds=880 -g ",
    "ti.targets.arm.elf.M3"           : " -ms -pdr -pden -pds=238 -pds=880 -g "
};

var lnkOpts = {
    "ti.targets.elf.C64T"             : "",
    "ti.targets.elf.C674"             : "",
    "ti.targets.elf.C66"              : " -cr ",
    "ti.targets.arm.elf.M3"           : ""
};

var platforms = {
    "ti.targets.elf.C64T"             : ["ti.platform.omap4430.dsp"],
    "ti.targets.elf.C674"             : ["ti.platforms.evmOMAPL138:DSP"],
    "ti.targets.elf.C66"              : ["ti.platform.simKepler"],
//    "ti.targets.elf.C66"              : ["ti.platforms.evm6614:DSP"],
    "ti.targets.arm.elf.M3"           : ["ti.platform.omap4430.core0",
					 "ti.platform.omap4430.core1"]
};

/* initialize local vars with those set in xdcpaths.mak (via XDCARGS) */
for (arg = 0; arg < arguments.length; arg++) {
    /*
     * Get the compiler's installation directory.
     * For "ti.targets.elf.C674=/vendors/c6x/7.2.0", we get "/vendors/c6x/7.2.0"
     */
    var targetName = arguments[arg].split("=")[0];
    var rootDir = arguments[arg].split("=")[1];

    /* only build for the specified compilers */
    if (rootDir == "" || rootDir == undefined) {
        continue;
    }

    var target = xdc.useModule(targetName);
    target.rootDir = rootDir;
    target.ccOpts.suffix += ccOpts[targetName];
    target.lnkOpts.suffix += lnkOpts[targetName];
    target.platforms = platforms[targetName];
    Build.targets.$add(target);
}

var evmOMAPL138_ExtMemMap = {
    DDR: {
        name: "DDR",
        base: 0xc4000000,
        len:  0x00800000,
        space: "code/data"
    }
};

Build.platformTable["ti.platforms.evmOMAPL138:DSP"] = {
    externalMemoryMap: [
        [ "DDR", evmOMAPL138_ExtMemMap.DDR ]
    ],
    codeMemory: "DDR",
    dataMemory: "DDR",
    stackMemory: "DDR",
    l2Mode: "32k"
};



/* Eliminate profiles that aren't debug or release */
for (var t = 0; t < Build.targets.length; t++) {
//    print("Inspecting target " + Build.targets[t]);
    for (prof in Build.targets[t].profiles) {
//      print("Inspecting profile " + prof);
        if ((prof != "debug") && (prof != "release")) {
//          print("Deleting profile " + Build.targets[t].profiles[prof]);
            delete Build.targets[t].profiles[prof];
        }
    }
}
