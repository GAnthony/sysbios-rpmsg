/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */

switch (Program.platformName) {
    case "ti.platforms.evm6614:DSP":
        var nameList = ["HOST", "CORE0", "CORE1", "CORE2", "CORE3"];
        break;
    case "ti.sdo.ipc.examples.platforms.evm6678.core0":
        var nameList = ["HOST", "CORE0", "CORE1", "CORE2", "CORE3",
                        "CORE4", "CORE5", "CORE6", "CORE7"];
        break;
    default:
        throw("Platform " + Program.platformName + " not supported by this example");
        break;
}

/*
 *  Since this is a single-image example, we don't know (at build-time) which
 *  processor we're building for.  We therefore supply 'null'
 *  as the local procName and allow IPC to set the local procId at runtime.
 */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig(null, nameList);

/* We don't use MultiProcSetup, but we have to pull it in first to shut it
 * up before NotifySetup brings it in causes MulotiProc ids to be set in a
 * Startup_first fxn.
 */
var MultiProcSetup = xdc.useModule('ti.sdo.ipc.family.c647x.MultiProcSetup');
MultiProcSetup.configureProcId = false;


/* Plug shared Interrupt used in TransportVirtio into NotifyDriverShm, before
 * loading Settings.xs:
 */
var NotifyDriverShm = xdc.useModule('ti.sdo.ipc.notifyDrivers.NotifyDriverShm');
var Interrupt = xdc.useModule('ti.ipc.family.tci6614.Interrupt');
NotifyDriverShm.InterruptProxy = xdc.useModule(Interrupt);

/* ====== From SC_MCSDK PDK Setting in bench_shm.cfg  ==================== */
var MessageQ                = xdc.module('ti.sdo.ipc.MessageQ');
/*
 * Note: Notify brings in the ti.sdo.ipc.family.Settings module, which does
 * lots of config magic which will need to be UNDONE later, or setup earlier,
 * cause the necessary overrides to MultiProcSetup, NotifySetup and Interrupt!
 */
var Notify                  = xdc.module('ti.sdo.ipc.Notify');
var Ipc                     = xdc.useModule('ti.sdo.ipc.Ipc');
//MessageQ.SetupTransportProxy = xdc.module('ti.sdo.ipc.transports.TransportShmNotifySetup');

/* Note: Must call this to override what's done in Settings.xs ! */
Notify.SetupProxy           = xdc.module('ti.ipc.family.tci6614.NotifySetup');

/* ============== From IPC message_multicore example: ===================== */

var VirtioSetup = xdc.useModule('ti.ipc.transports.TransportVirtioSetup');
//MessageQ.SetupTransportProxy = VirtioSetup;

//var NameServer = xdc.useModule("ti.sdo.utils.NameServer");
var NsRemote = xdc.useModule("ti.ipc.namesrv.NameServerRemoteRpmsg");
//NameServer.SetupProxy = NsRemote;

var System   = xdc.useModule('xdc.runtime.System');

/* Modules explicitly used in the application */
var HeapBufMP   = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');

/* BIOS/XDC modules */
var BIOS        = xdc.useModule('ti.sysbios.BIOS');
BIOS.heapSize   = 0x8000;
var Task        = xdc.useModule('ti.sysbios.knl.Task');

var tsk0 = Task.create('&tsk0_func');
tsk0.instance.name = "tsk0";

/* Synchronize all processors (this will be done in Ipc_start) */
//Ipc.procSync = Ipc.ProcSync_NONE;
Ipc.procSync = Ipc.ProcSync_ALL;

/* Shared Memory base address and length */
var SHAREDMEM           = 0x0C000000;
var SHAREDMEMSIZE       = 0x00200000;

/*
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM,
      len:  SHAREDMEMSIZE,
      ownerProcId: 1,  /* Ensure CORE0 SR0 is owner, NOT HOST! */
      isValid: true,
      name: "MSMC SRAM",
    });

/* =================== Taken from messageq_common.cfg: ================= */

//var TransportVirtio = xdc.useModule('ti.ipc.transports.TransportVirtio');
var VirtQueue = xdc.useModule('ti.ipc.family.tci6614.VirtQueue');

//var Hwi = xdc.useModule('ti.sysbios.family.c64p.Hwi');
//Hwi.enableException = true;

xdc.loadPackage('ti.ipc.ipcmgr');
BIOS.addUserStartupFunction('&IpcMgr_ipcStartup');

/*
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var params = new HeapBuf.Params;
params.align = 8;
params.blockSize = 512;
params.numBlocks = 256;
var msgHeap = HeapBuf.create(params);
*/

//MessageQ.registerHeapMeta(msgHeap, 0);

var Assert = xdc.useModule('xdc.runtime.Assert');
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Text = xdc.useModule('xdc.runtime.Text');
Text.isLoaded = true;

var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
Program.global.sysMinBufSize = 0x8000;
SysMin.bufSize  =  Program.global.sysMinBufSize;

Program.sectMap[".text:_c_int00"] = new Program.SectionSpec();
Program.sectMap[".text:_c_int00"].loadSegment = "L2SRAM";
Program.sectMap[".text:_c_int00"].loadAlign = 0x400;

/* BIOS Resource Table: */
Program.sectMap[".resource_table"] = new Program.SectionSpec();
Program.sectMap[".resource_table"].type = "NOINIT";
Program.sectMap[".resource_table"] = "L2SRAM";

/* Get the trace buffer to show up! */
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
//Idle.addFunc('&VirtQueue_cacheWb');
Idle.addFunc('&traceBuf_cacheWb');

var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
/*  This doesn't work:
         Cache.MAR160_191 = 0xFFFFFFFC;
         So, need to do this:
*/
Cache.setMarMeta(0xA0000000, 0x1FFFFFF, 0);

var Diags = xdc.useModule('xdc.runtime.Diags');

/*  COMMENT OUT TO SHUT OFF LOG FOR BENCHMARKS: */
Diags.setMaskMeta("ti.ipc.family.tci6614.VirtQueue", Diags.USER1,
	Diags.ALWAYS_ON);
Diags.setMaskMeta("ti.ipc.family.tci6614.Interrupt", Diags.USER1,
	Diags.ALWAYS_ON);
Diags.setMaskMeta("ti.ipc.namesrv.NameServerRemoteRpmsg", Diags.INFO,
	Diags.ALWAYS_ON);
/*
Diags.setMaskMeta("ti.ipc.transports.TransportVirtio",
	Diags.INFO|Diags.USER1|Diags.STATUS,
	Diags.ALWAYS_ON);
*/

var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();

Defaults.common$.logger = LoggerSys.create(LoggerSysParams);
