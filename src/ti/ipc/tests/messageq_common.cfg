/*
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var Memory = xdc.useModule('xdc.runtime.Memory');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.heapSize = 0x20000;
BIOS.libType = BIOS.LibType_Custom;

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.deleteTerminatedTasks = true;

var MessageQ  = xdc.useModule('ti.sdo.ipc.MessageQ');
var VirtioSetup = xdc.useModule('ti.ipc.transports.TransportVirtioSetup');
MessageQ.SetupTransportProxy = VirtioSetup;

var NameServer = xdc.useModule("ti.sdo.utils.NameServer");
var NsRemote = xdc.useModule("ti.ipc.namesrv.NameServerRemoteRpmsg");
NameServer.SetupProxy = NsRemote;

var TransportVirtio = xdc.useModule('ti.ipc.transports.TransportVirtio');

var Idle = xdc.useModule('ti.sysbios.knl.Idle');
Idle.addFunc('&VirtQueue_cacheWb');

if (Program.platformName.match(/OMAPL138/)) {
    xdc.includeFile("ti/configs/omapl138/Dsp.cfg");
    var VirtQueue = xdc.useModule('ti.ipc.family.omapl138.VirtQueue');
    var Interrupt = xdc.useModule('ti.ipc.family.omapl138.InterruptDsp');
    var Hwi = xdc.useModule('ti.sysbios.family.c64p.Hwi');
}
else if (Program.platformName.match(/omap4430/)) {
    xdc.includeFile("ti/configs/omap4430/DucatiCore0.cfg");
    xdc.includeFile("ti/configs/omap4430/DucatiAmmu.cfg");
    var VirtQueue = xdc.useModule('ti.ipc.family.omap4430.VirtQueue');
    var Interrupt = xdc.useModule('ti.ipc.family.omap4430.InterruptM3');
    var Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');

    /* Modules used in Power Management */
    xdc.loadPackage('ti.pm');
    var Power = xdc.useModule('ti.sysbios.family.arm.ducati.omap4430.Power');
    Power.loadSegment = "PM_DATA";

    /* IpcPower idle function must be at the end */
    Idle.addFunc('&IpcPower_idle');
}
else {
    print ("messageq_common.cfg: Did not match any platform! \n");
    }

Hwi.enableException = true;

BIOS.addUserStartupFunction('&ipcStartup');

var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var params = new HeapBuf.Params;
params.align = 8;
params.blockSize = 512;
params.numBlocks = 256;
var msgHeap = HeapBuf.create(params);

MessageQ.registerHeapMeta(msgHeap, 0);

var Assert = xdc.useModule('xdc.runtime.Assert');
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Text = xdc.useModule('xdc.runtime.Text');
Text.isLoaded = true;

var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();

Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

var System = xdc.useModule('xdc.runtime.System');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize  = 0x8000;
